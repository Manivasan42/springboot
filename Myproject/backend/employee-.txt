//1st page for employee management project

//backend code




package com.example.demo.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "employees")
public class Employee {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
@Column(name = "id")
private long id;

@Column(name = "first_name")
private String firstName;

@Column(name = "last_name")
private String lastName;

@Column(name = "email_id")
private String email_id;
public long getId() {
	return id;
}
public void setId(long id) {
	this.id = id;
}

public String getFirstName() {
	return firstName;
}
public void setFirstName(String firstName) {
	this.firstName = firstName;
}
public String getLastName() {
	return lastName;
}
public void setLastName(String lastName) {
	this.lastName = lastName;
}
public String getEmail_id() {
	return email_id;
}
public void setEmail_id(String email_id) {
	this.email_id = email_id;
}
public Employee(long id, String firstName, String lastName, String email_id) {
	super();
	this.id = id;
	this.firstName = firstName;
	this.lastName = lastName;
	this.email_id = email_id;
}
public Employee() {
	super();
}

}



//2nd page 
package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.demo.model.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

	
}



//3rd page
package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value =  HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException{

	
	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String message) {
		super(message);
	}
}



//4th page

package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value =  HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException{

	
	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String message) {
		super(message);
	}
}



// 5th page 
package com.example.demo.control;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Employee;
import com.example.demo.service.EmployeeService;
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/employee")
public class EmployeeController {
	@Autowired
	private EmployeeService empser;
	@GetMapping("/getall")
	public List<Employee>getAllEmployee()
	{
	  return empser.getEmployeeDetails();
	} 
	
	@PostMapping("/addEmployee")
	public  Employee save(@RequestBody Employee employees)
	{
		return empser.saveOrUpdate(employees);
	}
	
	@GetMapping("/getId/{id}")
    public Employee getEmployeeById(@PathVariable Long id) {
        Employee employee = empser.getEmployeeById1(id);
        return employee;
    }
//	@PutMapping("/updateEmployee")  
//	public String update(@RequestBody Employee employee )   
//	{  
//		empser.saveOrUpdate(employee);  
//	return "updated successfully";  
//	}  

	 @PutMapping("/updateEmployee/{id}")
	    public ResponseEntity<Employee> updateEmployee(
	        @PathVariable Long id,
	        @RequestBody Employee updatedEmployee
	    ) {
	        Employee updated = empser.updateEmployee(id, updatedEmployee);
	        return ResponseEntity.ok(updated);
	    }
	 
	 @DeleteMapping("/deleteEmployee/{id}")
	    public ResponseEntity<String> deleteEmployee(@PathVariable Long id) {
		 empser.deleteEmployeeById(id);
	        return ResponseEntity.ok("Employee deleted successfully");
	    }
}

//application.file

server.port=9191
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/employee_management_system_application
spring.datasource.username=root
spring.datasource.password=11402
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.show-sql: true



//front end code


